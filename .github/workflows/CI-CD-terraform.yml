name: Deploy to ECR
on:
  # Triggers the workflow on push, when any cahnges are done in repo on master branch
  # push:
  #   branches: [ master ]
  # Allow Manually trigger the workflow from GitHuB Action tab
  workflow_dispatch:
    inputs:
      terraform:
        description: terraform command to choose apply or destroy
        required: true
        default: apply
        type: choice
        options: 
        - apply
        - destroy
env:
 ECR_REPOSITORY: flask_app_ecr
 IMAGE_TAG: ${{ github.sha }}
 AWS_REGION: us-west-2
 EKS_CLUSTER_NAME: eks-cluster-01
 APP_NAME: my-flask-app
 AWS_ACCOUNT_ID: 678499129427
  
#Jobs to build, configure and push 
jobs:

  Deployment:
    name: Automated pipeline
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Initialize Terraform and apply 
      if: ${{ github.event.inputs.terraform == 'apply' }}
      run: |
        cd infra/terraform 
        terraform init 
        terraform validate
        terraform ${{ inputs.terraform }} -auto-approve

    - name: terraform destroy
      if: ${{ github.event.inputs.terraform == 'destroy' }}
      run: |
         cd infra/terraform
         terraform ${{ inputs.terraform }} -auto-approve

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Configure Docker Client
      run: |-
         gcloud auth configure-docker --quiet
         gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: Build and push with variables
      run: |
        docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

    # - name: Install kubectl
    #   run: |
    #     curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
    #     chmod +x ./kubectl
    #     sudo mv ./kubectl /usr/local/bin/kubectl
    #     kubectl version --client

    # - name: Update kubeconfig
    #   run: |
    #     aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    # - name: Deploy to EKS
    #   run: |
    #     kubectl apply -f - <<EOF
    #     apiVersion: apps/v1
    #     kind: Deployment
    #     metadata:
    #       name: ${{ env.APP_NAME }}
    #     spec:
    #       replicas: 3
    #       selector:
    #         matchLabels:
    #           app: ${{ env.APP_NAME }}
    #       template:
    #         metadata:
    #           labels:
    #             app: ${{ env.APP_NAME }}
    #         spec:
    #           containers:
    #           - name: ${{ env.APP_NAME }}
    #             image: ${{ env.ECR_REPOSITORY_URI }}:$IMAGE_TAG
    #             ports:
    #             - containerPort: 80
    #     ---
    #     apiVersion: v1
    #     kind: Service
    #     metadata:
    #       name: my-app-service
    #     spec:
    #       type: LoadBalancer
    #       selector:
    #         app: ${{ env.APP_NAME }}
    #       ports:
    #         - protocol: TCP
    #           port: 80
    #           targetPort: 80
    #     EOF
    
