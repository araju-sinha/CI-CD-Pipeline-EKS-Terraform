# workflow to build and push docker image to AWS ECR (Elastic Container Registory)

name: CI-CD-flask-pipeline

on:
  workflow_dispatch:
env:
 ECR_REPOSITORY: flask_app_ecr
 IMAGE_TAG: ${{ github.sha }}
 AWS_REGION: us-west-2
 EKS_CLUSTER_NAME: eks-cluster-01
 APP_NAME: my-flask-app

#Jobs to build, configure and push 
jobs:
  Deployment:
    name: CI-CD of flask application
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get ECR repository URI
    # ecr_repository_url = "678499129427.dkr.ecr.us-west-2.amazonaws.com/flask_app_ecr"
      id: get_ecr_uri
      run: |
        ECR_REPOSITORY_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query 'repositories[0].repositoryUri' --output text)
        echo "ECR_REPOSITORY_URI=$ECR_REPOSITORY_URI" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Configure Docker Client
      run: |-
         gcloud auth configure-docker --quiet
         gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: docker version command
      run: docker --version

    - name: build, tag and push image to ECR
      run: |
        docker build -t ${{ env.ECR_REPOSITORY_URI }}:$IMAGE_TAG ./app
        docker ps -a 
        docker push ${{ env.ECR_REPOSITORY_URI }}:$IMAGE_TAG

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ env.APP_NAME }}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: ${{ env.APP_NAME }}
          template:
            metadata:
              labels:
                app: ${{ env.APP_NAME }}
            spec:
              containers:
              - name: ${{ env.APP_NAME }}
                image: ${{ env.ECR_REPOSITORY_URI }}:$IMAGE_TAG
                ports:
                - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: my-app-service
        spec:
          type: LoadBalancer
          selector:
            app: ${{ env.APP_NAME }}
          ports:
            - protocol: TCP
              port: 80
              targetPort: 80
        EOF






          
