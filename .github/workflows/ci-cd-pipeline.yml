# workflow to build and push docker image to AWS ECR (Elastic Container Registory)

name: CI-CD-flask-pipeline

on:
  workflow_dispatch:
env:
 ECR_REPOSITORY: flask_app_ecr
 IMAGE_TAG: ${{ github.sha }}

#Jobs to build, configure and push 
jobs:
  Deployment:
    name: CI-CD of flask application
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Get ECR repository URI
    # ecr_repository_url = "678499129427.dkr.ecr.us-west-2.amazonaws.com/flask_app_ecr"
      id: get_ecr_uri
      run: |
        ECR_REPOSITORY_URI=$(aws ecr describe-repositories --repository-names $REPOSITORY_NAME --query 'repositories[0].repositoryUri' --output text)
        echo "ECR_REPOSITORY_URI=$ECR_REPOSITORY_URI" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Configure Docker Client
      run: |-
         gcloud auth configure-docker --quiet
         gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: docker version command
      run: docker --version

    - name: build, tag and push image to ECR
#        IMAGE_TAG: flask_app
      run: |
        docker build -t ${{ env.ECR_REPOSITORY_URI }}:$IMAGE_TAG ./app
        docker ps -a 
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
     #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     
    # - name: Deploy to EKS
    #   uses: aws-actions/amazon-eks-deploy@v1
    #   with:
    #     eks-cluster: ${{ env.EKS_CLUSTER }}
    #     image: ${{ steps.build-image.outputs.image }}






          
