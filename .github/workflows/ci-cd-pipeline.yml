# workflow to build and push docker image to AWS ECR (Elastic Container Registory)

name: CI-CD-flask-pipeline

on:
  workflow_dispatch:
  
#Jobs to build, configure and push 
jobs:
  Deployment:
    name: CI-CD of flask application
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Configure Docker Client
      run: |-
         gcloud auth configure-docker --quiet
         gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: docker version command
      run: docker --version

    - name: Get ECR repository URL
      id: ecr
      run: echo "::set-output name=url::$(terraform output -raw ecr_repository_url)"

    - name: build, tag and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.ecr.outputs.url }}
        ECR_REPOSITORY: flask_app_ecr
        IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}
#        IMAGE_TAG: flask_app
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $flask_image_output
     
    - name: executing docker commands
      run: docker ps -a 

    # - name: Deploy to EKS
    #   uses: aws-actions/amazon-eks-deploy@v1
    #   with:
    #     eks-cluster: ${{ env.EKS_CLUSTER }}
    #     image: ${{ steps.build-image.outputs.image }}






          
